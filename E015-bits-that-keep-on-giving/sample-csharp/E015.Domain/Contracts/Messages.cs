using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace E015.Contracts
{
    #region Generated by Lokad Code DSL
    
    /// <summary>
    /// Open factory(ID='{Id}')
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class OpenFactory : IFactoryCommand
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        
        OpenFactory () {}
        public OpenFactory (FactoryId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"Open factory(ID='{0}')", Id);
        }
    }
    
    /// <summary>
    /// Opened factory(ID='{Id}')
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class FactoryOpened : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        
        FactoryOpened () {}
        public FactoryOpened (FactoryId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"Opened factory(ID='{0}')", Id);
        }
    }
    
    /// <summary>
    /// Assign employee '{employeeName}'
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class AssignEmployeeToFactory : IFactoryCommand
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        AssignEmployeeToFactory () {}
        public AssignEmployeeToFactory (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Assign employee '{0}'", EmployeeName);
        }
    }
    
    /// <summary>
    /// new worker joins our forces: '{employeeName}'
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class EmployeeAssignedToFactory : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        EmployeeAssignedToFactory () {}
        public EmployeeAssignedToFactory (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"new worker joins our forces: '{0}'", EmployeeName);
        }
    }
    
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class ReceiveShipmentInCargoBay : IFactoryCommand
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string ShipmentName { get; private set; }
        [DataMember(Order = 3)] public CarPart[] CarParts { get; private set; }
        
        ReceiveShipmentInCargoBay () 
        {
            CarParts = new CarPart[0];
        }
        public ReceiveShipmentInCargoBay (FactoryId id, string shipmentName, CarPart[] carParts)
        {
            Id = id;
            ShipmentName = shipmentName;
            CarParts = carParts;
        }
        
        public override string ToString()
        {
            return Describe.Message(this);
        }
    }
    
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class ShipmentReceivedInCargoBay : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public InventoryShipment Shipment { get; private set; }
        
        ShipmentReceivedInCargoBay () {}
        public ShipmentReceivedInCargoBay (FactoryId id, InventoryShipment shipment)
        {
            Id = id;
            Shipment = shipment;
        }
        
        public override string ToString()
        {
            return Describe.Message(this);
        }
    }
    
    /// <summary>
    /// '{theWord}' was heard within the walls. It meant:\r\n    '{meaning}'
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class CurseWordUttered : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string TheWord { get; private set; }
        [DataMember(Order = 3)] public string Meaning { get; private set; }
        
        CurseWordUttered () {}
        public CurseWordUttered (FactoryId id, string theWord, string meaning)
        {
            Id = id;
            TheWord = theWord;
            Meaning = meaning;
        }
        
        public override string ToString()
        {
            return string.Format(@"'{0}' was heard within the walls. It meant:\r\n    '{1}'", TheWord, Meaning);
        }
    }
    
    /// <summary>
    /// Unload the cargo '{employeeName}'
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class UnpackAndInventoryShipmentInCargoBay : IFactoryCommand
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        UnpackAndInventoryShipmentInCargoBay () {}
        public UnpackAndInventoryShipmentInCargoBay (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Unload the cargo '{0}'", EmployeeName);
        }
    }
    
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class ShipmentUnpackedInCargoBay : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public InventoryShipment[] InventoryShipments { get; private set; }
        
        ShipmentUnpackedInCargoBay () 
        {
            InventoryShipments = new InventoryShipment[0];
        }
        public ShipmentUnpackedInCargoBay (FactoryId id, string employeeName, InventoryShipment[] inventoryShipments)
        {
            Id = id;
            EmployeeName = employeeName;
            InventoryShipments = inventoryShipments;
        }
        
        public override string ToString()
        {
            return Describe.Message(this);
        }
    }
    
    /// <summary>
    /// Employee '{employee}' produce car:{carModel}
    /// </summary>
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class ProduceACar : IFactoryCommand
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public string CarModel { get; private set; }
        
        ProduceACar () {}
        public ProduceACar (FactoryId id, string employeeName, string carModel)
        {
            Id = id;
            EmployeeName = employeeName;
            CarModel = carModel;
        }
        
        public override string ToString()
        {
            return string.Format(@"Employee '{0}' produce car:{1}", EmployeeName, CarModel);
        }
    }
    
    [DataContract(Namespace = "MyDataContractAttributeNamespace")]
    public partial class CarProduced : IFactoryEvent
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public string CarModel { get; private set; }
        [DataMember(Order = 4)] public CarPart[] Parts { get; private set; }
        
        CarProduced () 
        {
            Parts = new CarPart[0];
        }
        public CarProduced (FactoryId id, string employeeName, string carModel, CarPart[] parts)
        {
            Id = id;
            EmployeeName = employeeName;
            CarModel = carModel;
            Parts = parts;
        }
        
        public override string ToString()
        {
            return Describe.Message(this);
        }
    }
    
    public interface IFactoryApplicationService
    {
        void When(OpenFactory c);
        void When(AssignEmployeeToFactory c);
        void When(ReceiveShipmentInCargoBay c);
        void When(UnpackAndInventoryShipmentInCargoBay c);
        void When(ProduceACar c);
    }
    
    public interface IFactoryState
    {
        void When(FactoryOpened e);
        void When(EmployeeAssignedToFactory e);
        void When(ShipmentReceivedInCargoBay e);
        void When(CurseWordUttered e);
        void When(ShipmentUnpackedInCargoBay e);
        void When(CarProduced e);
    }
    #endregion
}
